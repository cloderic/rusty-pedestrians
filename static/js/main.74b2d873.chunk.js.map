{"version":3,"sources":["Stylesheet.js","DebugCircle.js","Pedestrian.js","DebugHalfplane.js","PedestrianDebugInfo.js","Environment.js","AccessibleEmoji.js","Navmesh.js","useSimulation.js","App.js","serviceWorker.js","index.js"],"names":["Stylesheet","styles","css","lighten","createAlphaMap","startRadius","stopRadius","size","scale","Math","max","scaledRadii","canvas","document","createElement","width","height","ctx","getContext","grd","createRadialGradient","addColorStop","fillStyle","fillRect","CanvasTexture","DebugCircle","radius","color","outerGlow","segments","alphaMap","useMemo","rotation","PI","args","Color","transparent","COLOR_VECTOR","Vector3","normalize","PEDESTRIAN_URL","process","FallbackPedestrianMesh","otherProps","position","PedestrianMesh","nodes","useGLTF","geometry","Pedestrian","PedestrianMeshWithFallback","props","fallback","direction","selected","onClick","useState","setColor","useEffect","p","x","y","alpha","min","dot","mix","atan2","castShadow","DebugHalfplane","origin","altitude","length","createLinearGradient","VELOCITY_COLOR","MAX_SPEED_COLOR","DESIRED_SPEED_COLOR","TARGET_COLOR","CONSTRAINTS_COLOR","PedestrianDebugInfo","agent","orca_constraints","map","index","key","Line","points","velocity","maximum_speed","desired_speed","target","Environment","scene","useThree","background","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","AccessibleEmoji","emoji","label","role","Navmesh","navmeshObj","navmesh","OBJLoader","parse","children","object","receiveShadow","useSimulation","universe","selectedAgentIdx","paused","simulationFrequency","agents","setAgents","selectedAgentDebugInfo","setSelectedAgentDebugInfo","renderAgents","useCallback","chunk","render_agents","posX","posY","dirX","dirY","JSON","render_debug_info","setNavmeshObj","started","setStarted","reset","render_navmesh","computeSimulationStep","update","interval","setInterval","clearInterval","softShadows","Container","styled","div","ControlBar","App","setSelectedAgentIdx","handleClearSelection","initialValue","value","setValue","toggle","v","useToggle","togglePaused","camera","fov","shadowMap","onPointerMissed","bind","MapControls","name","disabled","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Universe","new","load_scenario","stringify","scenario","agents_per_side_count","ReactDOM","render","StrictMode","getElementById","e"],"mappings":"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","file":"static/js/main.74b2d873.chunk.js","sourcesContent":["import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport { lighten } from 'polished';\n\nimport 'normalize.css';\n\nexport const WHITE = '#FFFFFF';\nexport const BLACK = '#000000';\nexport const PRIMARY = '#f77976';\nexport const GREY = '#808080';\nexport const DARK_GREY = '#505050';\nexport const PEDESTRIAN_1 = '#ff0000';\nexport const PEDESTRIAN_2 = '#0000ff';\n\nconst Stylesheet = () => (\n  <Global\n    styles={css`\n      html {\n        // Border box\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n      }\n      body {\n        min-height: 100vh;\n      }\n\n      a,\n      button {\n        color: inherit;\n        cursor: pointer;\n        background: none;\n        border: none;\n        &:active,\n        &:focus {\n          color: ${lighten(0.05, PRIMARY)};\n          outline: none;\n        }\n        &:hover {\n          color: ${PRIMARY};\n        }\n        &:disabled {\n          filter: opacity(50%);\n          &:hover {\n            cursor: not-allowed;\n          }\n        }\n      }\n    `}\n  />\n);\n\nexport default Stylesheet;\n","import React, { useMemo } from 'react';\nimport { CanvasTexture, Color } from 'three';\n\nconst createAlphaMap = (startRadius, stopRadius, size = 512) => {\n  const scale = size / (Math.max(startRadius, stopRadius) * 2);\n  const scaledRadii = [startRadius * scale, stopRadius * scale];\n\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext('2d');\n\n  // Create a gradient\n  const grd = ctx.createRadialGradient(\n    size / 2,\n    size / 2,\n    scaledRadii[0],\n    size / 2,\n    size / 2,\n    scaledRadii[1]\n  );\n  grd.addColorStop(0, 'white');\n  grd.addColorStop(1, 'black');\n\n  // Create a rectangle filled with the gradient\n  ctx.fillStyle = grd;\n  ctx.fillRect(0, 0, size, size);\n\n  return new CanvasTexture(canvas);\n};\n\nconst DebugCircle = ({\n  radius,\n  color,\n  outerGlow = false,\n  width = 0.15,\n  segments = 100,\n}) => {\n  const alphaMap = useMemo(\n    () =>\n      outerGlow\n        ? createAlphaMap(radius, radius + width)\n        : createAlphaMap(radius, radius - width),\n    [radius, width, outerGlow]\n  );\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]}>\n      {outerGlow ? (\n        <ringBufferGeometry args={[radius, radius + width, segments]} />\n      ) : (\n        <ringBufferGeometry args={[radius - width, radius, segments]} />\n      )}\n      <meshBasicMaterial\n        color={new Color(color)}\n        alphaMap={alphaMap}\n        transparent\n      />\n    </mesh>\n  );\n};\n\nexport default DebugCircle;\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { PEDESTRIAN_1, PEDESTRIAN_2 } from './Stylesheet';\nimport { mix } from 'polished';\nimport { Vector3 } from 'three';\nimport { useGLTF } from '@react-three/drei';\nimport DebugCircle from './DebugCircle';\n\nconst COLOR_VECTOR = new Vector3(1, 0, 0.5).normalize();\nconst COLOR_EXTENT = 10;\n\nconst PEDESTRIAN_URL = `${process.env.PUBLIC_URL}/assets/pedestrian.gltf`;\n\nconst FallbackPedestrianMesh = ({ radius, height, color, ...otherProps }) => (\n  <mesh position={[0, height / 2, 0]} {...otherProps}>\n    <cylinderBufferGeometry args={[radius, radius, height, 20]} />\n    <meshStandardMaterial color={color} />\n  </mesh>\n);\n\nconst PedestrianMesh = ({ radius, height, color, ...otherProps }) => {\n  const { nodes } = useGLTF(PEDESTRIAN_URL);\n  return (\n    <mesh\n      geometry={nodes.Pedestrian.geometry}\n      scale={[radius, height, radius]}\n      rotation={[0, -Math.PI / 2, 0]}\n      {...otherProps}\n    >\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n};\n\nconst PedestrianMeshWithFallback = (props) => (\n  <Suspense fallback={<FallbackPedestrianMesh {...props} />}>\n    <PedestrianMesh {...props} />\n  </Suspense>\n);\n\nconst Pedestrian = ({\n  position,\n  direction,\n  radius,\n  selected,\n  height = 2,\n  onClick,\n}) => {\n  const [color, setColor] = useState(PEDESTRIAN_1);\n  // Computing the color from the initial pedestrian position.\n  useEffect(\n    () => {\n      const p = new Vector3(position.x, 0, -position.y);\n      const alpha =\n        Math.max(-0.5, Math.min(0.5, p.dot(COLOR_VECTOR) / COLOR_EXTENT)) + 0.5;\n      setColor(mix(alpha, PEDESTRIAN_1, PEDESTRIAN_2));\n    }, // eslint-disable-next-line\n    []\n  );\n  return (\n    <group\n      position={[position.x, 0, -position.y]}\n      rotation={[0, Math.atan2(direction.y, direction.x), 0]}\n    >\n      <PedestrianMeshWithFallback\n        radius={radius}\n        height={height}\n        color={color}\n        castShadow\n        onClick={onClick}\n      />\n      {selected ? (\n        <DebugCircle radius={radius} size={0.05} color=\"#4af2a1\" outerGlow />\n      ) : null}\n    </group>\n  );\n};\n\nexport default Pedestrian;\n","import React, { useMemo } from 'react';\nimport { CanvasTexture, Color } from 'three';\n\nconst createAlphaMap = (size = 512) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext('2d');\n\n  // Create a gradient\n  const grd = ctx.createLinearGradient(0, size / 2, size, size / 2);\n  grd.addColorStop(0, 'white');\n  grd.addColorStop(1, 'black');\n\n  // Create a rectangle filled with the gradient\n  ctx.fillStyle = grd;\n  ctx.fillRect(0, 0, size, size);\n\n  return new CanvasTexture(canvas);\n};\n\nconst DebugHalfplane = ({\n  origin,\n  altitude,\n  direction,\n  color,\n  width = 0.15,\n  length = 512,\n}) => {\n  const alphaMap = useMemo(() => createAlphaMap(), []);\n  return (\n    <group\n      position={[origin.x, altitude, -origin.y]}\n      rotation={[0, Math.atan2(direction.y, direction.x), 0]}\n    >\n      <mesh\n        position={[0, 0, -width / 2]}\n        rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n      >\n        <planeBufferGeometry args={[width, length]} />\n        <meshBasicMaterial\n          color={new Color(color)}\n          alphaMap={alphaMap}\n          transparent\n        />\n      </mesh>\n    </group>\n  );\n};\n\nexport default DebugHalfplane;\n","import React from 'react';\nimport DebugCircle from './DebugCircle';\nimport DebugHalfplane from './DebugHalfplane';\nimport { Line } from '@react-three/drei';\nimport { Color } from 'three';\n\nconst VELOCITY_COLOR = new Color('#0068FF');\nconst MAX_SPEED_COLOR = new Color('#310fb8');\nconst DESIRED_SPEED_COLOR = new Color('#0068FF');\nconst TARGET_COLOR = new Color('#39B92C');\nconst CONSTRAINTS_COLOR = new Color('#ff6442');\nconst ALTITUDE_OFFSET = 0.05;\n\nconst PedestrianDebugInfo = ({ agent, orca_constraints }) => {\n  return (\n    <group>\n      <group position={[agent.position.x, 0, -agent.position.y]}>\n        {orca_constraints.map(([origin, direction], index) => (\n          <DebugHalfplane\n            key={index}\n            altitude={index * ALTITUDE_OFFSET}\n            origin={origin}\n            direction={direction}\n            color={CONSTRAINTS_COLOR}\n          />\n        ))}\n        <group position={[0, orca_constraints.length * ALTITUDE_OFFSET, 0]}>\n          <Line\n            points={[\n              [0, 0, 0],\n              [agent.velocity.x, 0, -agent.velocity.y],\n            ]}\n            color={VELOCITY_COLOR}\n          />\n          <DebugCircle radius={agent.maximum_speed} color={MAX_SPEED_COLOR} />\n          <DebugCircle\n            radius={agent.desired_speed}\n            color={DESIRED_SPEED_COLOR}\n          />\n        </group>\n      </group>\n      <group position={[agent.target.x, 0, -agent.target.y]}>\n        <mesh>\n          <sphereBufferGeometry args={[0.1]} />\n          <meshStandardMaterial color={TARGET_COLOR} />\n        </mesh>\n      </group>\n    </group>\n  );\n};\n\nexport default PedestrianDebugInfo;\n","import React, { useEffect } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport { Color } from 'three';\n\nconst Environment = ({ color }) => {\n  const { scene } = useThree();\n  useEffect(() => {\n    scene.background = new Color(color);\n  }, [scene, color]);\n  return (\n    <>\n      <ambientLight />\n      <directionalLight\n        castShadow\n        position={[25, 50, -8]}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-far={100}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n    </>\n  );\n};\n\nexport default Environment;\n","import React from 'react';\n\nconst AccessibleEmoji = ({ emoji, label }) => (\n  <span role=\"img\" label={label}>\n    {emoji}\n  </span>\n);\n\nexport default AccessibleEmoji;\n","import React, { useMemo } from 'react';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nconst Navmesh = ({ navmeshObj, color }) => {\n  const navmesh = useMemo(() => {\n    const loader = new OBJLoader();\n    const scene = loader.parse(navmeshObj);\n    return scene.children[0];\n  }, [navmeshObj]);\n\n  return (\n    <primitive\n      object={navmesh}\n      position={[0, 0, 0]}\n      rotation={[-Math.PI / 2, 0, 0]}\n      receiveShadow\n    >\n      <meshStandardMaterial color={color} />\n    </primitive>\n  );\n};\nexport default Navmesh;\n","import { useCallback, useEffect, useState } from 'react';\nimport chunk from 'lodash.chunk';\n\nconst useSimulation = ({\n  universe,\n  selectedAgentIdx,\n  paused,\n  simulationFrequency,\n}) => {\n  // Agents rendering (including debug info for the selected agent)\n  const [agents, setAgents] = useState([]);\n  const [selectedAgentDebugInfo, setSelectedAgentDebugInfo] = useState(null);\n\n  const renderAgents = useCallback(() => {\n    const agents = chunk(universe.render_agents(), 7).map(\n      ([posX, posY, dirX, dirY, velX, velY, r], index) => ({\n        index,\n        position: { x: posX, y: posY },\n        direction: { x: dirX, y: dirY },\n        radius: r,\n      })\n    );\n    setAgents(agents);\n    if (selectedAgentIdx != null) {\n      setSelectedAgentDebugInfo(\n        JSON.parse(universe.render_debug_info(selectedAgentIdx))\n      );\n    }\n  }, [setAgents, setSelectedAgentDebugInfo, universe, selectedAgentIdx]);\n\n  // Rendered navmesh\n  const [navmeshObj, setNavmeshObj] = useState('');\n\n  // Simulation restart\n  const [started, setStarted] = useState(false);\n  const reset = useCallback(() => {\n    universe.reset();\n    renderAgents();\n    setStarted(false);\n  }, [universe, renderAgents]);\n\n  // Simulation load effect\n  useEffect(() => {\n    universe.reset();\n    setNavmeshObj(universe.render_navmesh());\n  }, [universe, setNavmeshObj]);\n\n  // Simulation step effect\n  const computeSimulationStep = useCallback(() => {\n    universe.update(1 / simulationFrequency);\n    setStarted(true);\n    renderAgents();\n  }, [universe, renderAgents, setStarted, simulationFrequency]);\n\n  useEffect(() => {\n    if (paused) {\n      renderAgents();\n    } else {\n      const interval = setInterval(\n        computeSimulationStep,\n        1000 / simulationFrequency\n      );\n      return () => clearInterval(interval);\n    }\n  }, [\n    universe,\n    paused,\n    renderAgents,\n    computeSimulationStep,\n    simulationFrequency,\n  ]);\n\n  return {\n    agents,\n    selectedAgentDebugInfo,\n    navmeshObj,\n    started,\n    paused,\n    reset,\n    computeSimulationStep,\n  };\n};\n\nexport default useSimulation;\n","import React, { useCallback, useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport Pedestrian from './Pedestrian';\nimport PedestrianDebugInfo from './PedestrianDebugInfo';\nimport Environment from './Environment';\nimport Stylesheet from './Stylesheet';\nimport styled from '@emotion/styled';\nimport { MapControls, softShadows } from '@react-three/drei';\nimport { DARK_GREY, GREY } from './Stylesheet';\nimport AccessibleEmoji from './AccessibleEmoji';\nimport Navmesh from './Navmesh';\nimport useSimulation from './useSimulation';\n\nconst SIMULATION_FREQUENCY = 60;\n\n// Inject soft shadow shader\nsoftShadows();\n\nconst Container = styled.div`\n  height: 100vh;\n  background: ${GREY};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ControlBar = styled.div`\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst useToggle = (initialValue = false) => {\n  const [value, setValue] = useState(initialValue);\n  const toggle = useCallback(() => {\n    setValue((v) => !v);\n  }, []);\n  return [value, toggle];\n};\n\nconst App = ({ universe }) => {\n  const [selectedAgentIdx, setSelectedAgentIdx] = useState(null);\n  const handleClearSelection = useCallback(() => {\n    setSelectedAgentIdx(null);\n  }, [setSelectedAgentIdx]);\n\n  const [paused, togglePaused] = useToggle(true);\n\n  const {\n    agents,\n    navmeshObj,\n    computeSimulationStep,\n    selectedAgentDebugInfo,\n    started,\n    reset,\n  } = useSimulation({\n    universe,\n    selectedAgentIdx,\n    paused,\n    simulationFrequency: SIMULATION_FREQUENCY,\n  });\n\n  return (\n    <>\n      <Stylesheet />\n      <Container>\n        <Canvas\n          camera={{ position: [0, 80, 0], fov: 10 }}\n          shadowMap={true}\n          onPointerMissed={handleClearSelection}\n        >\n          <Environment color={GREY} />\n          {agents.map(({ index, position, direction, radius }) => (\n            <Pedestrian\n              key={index}\n              position={position}\n              direction={direction}\n              radius={radius}\n              onClick={setSelectedAgentIdx.bind(null, index)}\n              selected={index === selectedAgentIdx}\n            />\n          ))}\n          {selectedAgentDebugInfo ? (\n            <PedestrianDebugInfo {...selectedAgentDebugInfo} />\n          ) : null}\n          <Navmesh color={DARK_GREY} navmeshObj={navmeshObj} />\n          <MapControls />\n        </Canvas>\n        <ControlBar>\n          <button onClick={togglePaused} name=\"toggle-play-pause\">\n            {paused ? (\n              <AccessibleEmoji emoji=\"▶️\" label=\"Play\" />\n            ) : (\n              <AccessibleEmoji emoji=\"⏸\" label=\"Pause\" />\n            )}\n          </button>\n          <button\n            onClick={computeSimulationStep}\n            name=\"single-step\"\n            disabled={!paused}\n          >\n            <AccessibleEmoji emoji=\"⏭\" label=\"Single Step\" />\n          </button>\n          <button onClick={reset} name=\"reset\" disabled={!started}>\n            <AccessibleEmoji emoji=\"↩️\" label=\"Reset\" />\n          </button>\n        </ControlBar>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// A dependency graph that contains any wasm must all be imported\n// asynchronously.\nimport('rusty-pedestrians-engine')\n  .then(({ Universe }) => {\n    const universe = Universe.new();\n    universe.load_scenario(\n      // JSON.stringify({\n      //   scenario: 'AntipodalCircle',\n      //   agents_count: 9,\n      //   radius: 6,\n      // })\n      JSON.stringify({\n        scenario: 'Corridor',\n        agents_per_side_count: 1,\n        length: 15,\n        width: 1.5,\n      })\n    );\n    ReactDOM.render(\n      <React.StrictMode>\n        <App universe={universe} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  })\n  .catch((e) => console.error('Error importing `index.js`:', e));\n"],"sourceRoot":""}