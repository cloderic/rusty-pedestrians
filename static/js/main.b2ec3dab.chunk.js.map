{"version":3,"sources":["Stylesheet.js","DebugCircle.js","Pedestrian.js","DebugHalfplane.js","PedestrianDebugInfo.js","Environment.js","AccessibleEmoji.js","App.js","serviceWorker.js","index.js"],"names":["Stylesheet","styles","css","lighten","createAlphaMap","startRadius","stopRadius","size","scale","Math","max","scaledRadii","canvas","document","createElement","width","height","ctx","getContext","grd","createRadialGradient","addColorStop","fillStyle","fillRect","CanvasTexture","DebugCircle","radius","color","outerGlow","segments","alphaMap","useMemo","rotation","PI","args","Color","transparent","COLOR_VECTOR","Vector3","normalize","Pedestrian","position","selected","onClick","useState","setColor","useEffect","p","x","y","alpha","min","dot","mix","castShadow","DebugHalfplane","origin","direction","length","createLinearGradient","atan2","VELOCITY_COLOR","MAX_SPEED_COLOR","DESIRED_SPEED_COLOR","TARGET_COLOR","CONSTRAINTS_COLOR","PedestrianDebugInfo","agent","orca_constraints","points","velocity","maximum_speed","desired_speed","map","target","Environment","scene","useThree","background","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","AccessibleEmoji","emoji","label","role","softShadows","Container","styled","div","ControlBar","App","universe","selectedAgentIdx","setSelectedAgentIdx","agents","agentDebugInfo","setRenderResult","render","useCallback","chunk","index","posX","posY","r","select","JSON","parse","render_debug_info","universeResetted","setUniverseResetted","resetUniverse","reset","initialValue","value","setValue","toggle","v","useToggle","paused","togglePaused","computeSimulationStep","update","interval","setInterval","clearInterval","camera","fov","shadowMap","key","receiveShadow","opacity","name","disabled","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Universe","new","load_scenario","stringify","scenario","agents_count","ReactDOM","StrictMode","getElementById","e"],"mappings":"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","file":"static/js/main.b2ec3dab.chunk.js","sourcesContent":["import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport { lighten } from 'polished';\n\nimport 'normalize.css';\n\nexport const WHITE = '#FFFFFF';\nexport const BLACK = '#000000';\nexport const PRIMARY = '#f77976';\nexport const GREY = '#808080';\nexport const PEDESTRIAN_1 = '#ff0000';\nexport const PEDESTRIAN_2 = '#0000ff';\n\nconst Stylesheet = () => (\n  <Global\n    styles={css`\n      html {\n        // Border box\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n      }\n      body {\n        min-height: 100vh;\n      }\n\n      a,\n      button {\n        color: inherit;\n        cursor: pointer;\n        background: none;\n        border: none;\n        &:active,\n        &:focus {\n          color: ${lighten(0.05, PRIMARY)};\n          outline: none;\n        }\n        &:hover {\n          color: ${PRIMARY};\n        }\n        &:disabled {\n          filter: opacity(50%);\n          &:hover {\n            cursor: not-allowed;\n          }\n        }\n      }\n    `}\n  />\n);\n\nexport default Stylesheet;\n","import React, { useMemo } from 'react';\nimport { CanvasTexture, Color } from 'three';\n\nconst createAlphaMap = (startRadius, stopRadius, size = 512) => {\n  const scale = size / (Math.max(startRadius, stopRadius) * 2);\n  const scaledRadii = [startRadius * scale, stopRadius * scale];\n\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext('2d');\n\n  // Create a gradient\n  const grd = ctx.createRadialGradient(\n    size / 2,\n    size / 2,\n    scaledRadii[0],\n    size / 2,\n    size / 2,\n    scaledRadii[1]\n  );\n  grd.addColorStop(0, 'white');\n  grd.addColorStop(1, 'black');\n\n  // Create a rectangle filled with the gradient\n  ctx.fillStyle = grd;\n  ctx.fillRect(0, 0, size, size);\n\n  return new CanvasTexture(canvas);\n};\n\nconst DebugCircle = ({\n  radius,\n  color,\n  outerGlow = false,\n  width = 0.15,\n  segments = 100,\n}) => {\n  const alphaMap = useMemo(\n    () =>\n      outerGlow\n        ? createAlphaMap(radius, radius + width)\n        : createAlphaMap(radius, radius - width),\n    [radius, width, outerGlow]\n  );\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]}>\n      {outerGlow ? (\n        <ringBufferGeometry args={[radius, radius + width, segments]} />\n      ) : (\n        <ringBufferGeometry args={[radius - width, radius, segments]} />\n      )}\n      <meshBasicMaterial\n        color={new Color(color)}\n        alphaMap={alphaMap}\n        transparent\n      />\n    </mesh>\n  );\n};\n\nexport default DebugCircle;\n","import React, { useState, useEffect } from 'react';\nimport { PEDESTRIAN_1, PEDESTRIAN_2 } from './Stylesheet';\nimport { mix } from 'polished';\nimport { Vector3 } from 'three';\nimport DebugCircle from './DebugCircle';\n\nconst COLOR_VECTOR = new Vector3(1, 0, 0.5).normalize();\nconst COLOR_EXTENT = 10;\n\nconst Pedestrian = ({ position, radius, selected, height = 2, onClick }) => {\n  const [color, setColor] = useState(PEDESTRIAN_1);\n  // Computing the color from the initial pedestrian position.\n  useEffect(\n    () => {\n      const p = new Vector3(position.x, 0, position.y);\n      const alpha =\n        Math.max(-0.5, Math.min(0.5, p.dot(COLOR_VECTOR) / COLOR_EXTENT)) + 0.5;\n      setColor(mix(alpha, PEDESTRIAN_1, PEDESTRIAN_2));\n    }, // eslint-disable-next-line\n    []\n  );\n  return (\n    <group position={[position.x, 0, position.y]}>\n      <mesh position={[0, height / 2, 0]} castShadow onClick={onClick}>\n        <cylinderBufferGeometry args={[radius, radius, height, 20]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      {selected ? (\n        <DebugCircle radius={radius} size={0.05} color=\"#4af2a1\" outerGlow />\n      ) : null}\n    </group>\n  );\n};\n\nexport default Pedestrian;\n","import React, { useMemo } from 'react';\nimport { CanvasTexture, Color } from 'three';\n\nconst createAlphaMap = (size = 512) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n\n  const ctx = canvas.getContext('2d');\n\n  // Create a gradient\n  const grd = ctx.createLinearGradient(0, size / 2, size, size / 2);\n  grd.addColorStop(0, 'white');\n  grd.addColorStop(1, 'black');\n\n  // Create a rectangle filled with the gradient\n  ctx.fillStyle = grd;\n  ctx.fillRect(0, 0, size, size);\n\n  return new CanvasTexture(canvas);\n};\n\nconst DebugHalfplane = ({\n  origin,\n  direction,\n  color,\n  width = 0.5,\n  length = 512,\n}) => {\n  const alphaMap = useMemo(() => createAlphaMap(), []);\n  return (\n    <group\n      position={[origin.x, 0, origin.y]}\n      rotation={[0, Math.atan2(-direction.y, direction.x), 0]}\n    >\n      <mesh\n        position={[0, 0, -width / 2]}\n        rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n      >\n        <planeBufferGeometry args={[width, length]} />\n        <meshBasicMaterial\n          color={new Color(color)}\n          alphaMap={alphaMap}\n          transparent\n        />\n      </mesh>\n    </group>\n  );\n};\n\nexport default DebugHalfplane;\n","import React from 'react';\nimport DebugCircle from './DebugCircle';\nimport DebugHalfplane from './DebugHalfplane';\nimport { Line } from '@react-three/drei';\nimport { Color } from 'three';\n\nconst VELOCITY_COLOR = new Color('#0068FF');\nconst MAX_SPEED_COLOR = new Color('#310fb8');\nconst DESIRED_SPEED_COLOR = new Color('#0068FF');\nconst TARGET_COLOR = new Color('#39B92C');\nconst CONSTRAINTS_COLOR = new Color('#ff6442');\n\nconst PedestrianDebugInfo = ({ agent, orca_constraints }) => {\n  return (\n    <group>\n      <group position={[agent.position.x, 0, agent.position.y]}>\n        <Line\n          points={[\n            [0, 0, 0],\n            [agent.velocity.x, 0, agent.velocity.y],\n          ]}\n          color={VELOCITY_COLOR}\n        />\n        <DebugCircle radius={agent.maximum_speed} color={MAX_SPEED_COLOR} />\n        <DebugCircle radius={agent.desired_speed} color={DESIRED_SPEED_COLOR} />\n        {orca_constraints.map(([origin, direction]) => (\n          <>\n            <DebugHalfplane\n              origin={origin}\n              direction={direction}\n              color={CONSTRAINTS_COLOR}\n            />\n            {/* <Line\n              points={[\n                [origin.x, 0, origin.y],\n                [origin.x + direction.x, 0, origin.y + direction.y],\n              ]}\n              color={CONSTRAINTS_COLOR}\n              lineWidth={2}\n            />\n            <group position={[origin.x, 0, origin.y]}>\n              <mesh>\n                <sphereBufferGeometry args={[0.1]} />\n                <meshStandardMaterial color={CONSTRAINTS_COLOR} />\n              </mesh>\n            </group> */}\n          </>\n        ))}\n      </group>\n      <group position={[agent.target.x, 0, agent.target.y]}>\n        <mesh>\n          <sphereBufferGeometry args={[0.1]} />\n          <meshStandardMaterial color={TARGET_COLOR} />\n        </mesh>\n      </group>\n    </group>\n  );\n};\n\nexport default PedestrianDebugInfo;\n","import React, { useEffect } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport { Color } from 'three';\n\nconst Environment = ({ color }) => {\n  const { scene } = useThree();\n  useEffect(() => {\n    scene.background = new Color(color);\n  }, [scene, color]);\n  return (\n    <>\n      <ambientLight />\n      <directionalLight\n        castShadow\n        position={[25, 50, -8]}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-far={100}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n    </>\n  );\n};\n\nexport default Environment;\n","import React from 'react';\n\nconst AccessibleEmoji = ({ emoji, label }) => (\n  <span role=\"img\" label={label}>\n    {emoji}\n  </span>\n);\n\nexport default AccessibleEmoji;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport chunk from 'lodash.chunk';\nimport Pedestrian from './Pedestrian';\nimport PedestrianDebugInfo from './PedestrianDebugInfo';\nimport Environment from './Environment';\nimport Stylesheet from './Stylesheet';\nimport styled from '@emotion/styled';\nimport { MapControls, softShadows } from '@react-three/drei';\nimport { GREY } from './Stylesheet';\nimport AccessibleEmoji from './AccessibleEmoji';\n\nconst UPDATE_FREQUENCY = 60;\n\n// Inject soft shadow shader\nsoftShadows();\n\nconst Container = styled.div`\n  height: 100vh;\n  background: ${GREY};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ControlBar = styled.div`\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst useToggle = (initialValue = false) => {\n  const [value, setValue] = useState(initialValue);\n  const toggle = useCallback(() => {\n    setValue((v) => !v);\n  }, []);\n  return [value, toggle];\n};\n\nconst App = ({ universe }) => {\n  const [selectedAgentIdx, setSelectedAgentIdx] = useState(null);\n  const [{ agents, agentDebugInfo }, setRenderResult] = useState({\n    agents: [],\n  });\n\n  const render = useCallback(() => {\n    const agents = chunk(universe.render(), 5).map(\n      ([posX, posY, velX, velY, r], index) => ({\n        index,\n        position: { x: posX, y: posY },\n        radius: r,\n        select: () => {\n          setSelectedAgentIdx(index);\n        },\n      })\n    );\n    if (selectedAgentIdx != null) {\n      setRenderResult({\n        agents,\n        agentDebugInfo: JSON.parse(\n          universe.render_debug_info(selectedAgentIdx)\n        ),\n      });\n    } else {\n      setRenderResult({ agents });\n    }\n  }, [setRenderResult, universe, selectedAgentIdx, setSelectedAgentIdx]);\n\n  const [universeResetted, setUniverseResetted] = useState(false);\n  const resetUniverse = useCallback(() => {\n    universe.reset();\n    render();\n    setUniverseResetted(true);\n  }, [universe, render]);\n  useEffect(() => {\n    universe.reset();\n  }, [universe]);\n\n  const [paused, togglePaused] = useToggle(true);\n  const computeSimulationStep = useCallback(() => {\n    universe.update(1 / UPDATE_FREQUENCY);\n    setUniverseResetted(false);\n    render();\n  }, [universe, render]);\n\n  useEffect(() => {\n    if (paused) {\n      render();\n    } else {\n      const interval = setInterval(\n        computeSimulationStep,\n        1000 / UPDATE_FREQUENCY\n      );\n      return () => clearInterval(interval);\n    }\n  }, [universe, paused, computeSimulationStep, render]);\n\n  return (\n    <>\n      <Stylesheet />\n      <Container>\n        <Canvas camera={{ position: [0, 80, 0], fov: 10 }} shadowMap={true}>\n          <Environment color={GREY} />\n          {agents.map(({ index, position, radius, select }) => (\n            <Pedestrian\n              key={index}\n              position={position}\n              radius={radius}\n              onClick={select}\n              selected={index === selectedAgentIdx}\n            />\n          ))}\n          {agentDebugInfo ? <PedestrianDebugInfo {...agentDebugInfo} /> : null}\n          <mesh\n            position={[0, 0, 0]}\n            rotation={[-Math.PI / 2, 0, 0]}\n            receiveShadow\n          >\n            <planeBufferGeometry args={[100, 100, 1000, 1000]} />\n            <shadowMaterial transparent opacity={0.4} />\n          </mesh>\n          <MapControls />\n        </Canvas>\n        <ControlBar>\n          <button onClick={togglePaused} name=\"toggle-play-pause\">\n            {paused ? (\n              <AccessibleEmoji emoji=\"▶️\" label=\"Play\" />\n            ) : (\n              <AccessibleEmoji emoji=\"⏸\" label=\"Pause\" />\n            )}\n          </button>\n          <button\n            onClick={computeSimulationStep}\n            name=\"single-step\"\n            disabled={!paused}\n          >\n            <AccessibleEmoji emoji=\"⏭\" label=\"Single Step\" />\n          </button>\n          <button\n            onClick={resetUniverse}\n            name=\"reset\"\n            disabled={universeResetted}\n          >\n            <AccessibleEmoji emoji=\"↩️\" label=\"Restart\" />\n          </button>\n        </ControlBar>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// A dependency graph that contains any wasm must all be imported\n// asynchronously.\nimport('rusty-pedestrians-engine')\n  .then(({ Universe }) => {\n    const universe = Universe.new();\n    universe.load_scenario(\n      JSON.stringify({\n        scenario: 'AntipodalCircle',\n        agents_count: 5,\n        radius: 6.5,\n      })\n    );\n    ReactDOM.render(\n      <React.StrictMode>\n        <App universe={universe} />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  })\n  .catch((e) => console.error('Error importing `index.js`:', e));\n"],"sourceRoot":""}